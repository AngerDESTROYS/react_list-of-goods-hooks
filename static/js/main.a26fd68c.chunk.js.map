{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","setSortType","isReversed","setIsReversed","vissibleGoods","goods","prepearedGoods","sort","good1","good2","SortFieldName","localeCompare","SortFieldLength","length","reverse","getPrepearedGoods","isStateNotReversedOrSorted","className","onClick","type","classNames","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qBAAAA,E,0BAAAA,M,KA6BE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA3BR,SAA2BC,EACzBL,EAAkBE,GAClB,IAAMI,EAAc,YAAOD,GAmB3B,MAjBiB,KAAbL,GACFM,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQT,GACN,KAAKJ,EAASc,cACZ,OAAOF,EAAMG,cAAcF,GAG7B,KAAKb,EAASgB,gBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAG9B,QACE,OAAO,MAKRX,EAAaI,EAAeQ,UAAYR,EAMzBS,CAAkBlB,EACtCG,EAAUE,GAMNc,EACFd,GAAcF,EAOlB,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMjB,EAAYL,EAASc,gBACpCS,KAAK,SACLF,UAAWG,IACT,SACA,UACA,CAAE,WAAYpB,IAAaJ,EAASc,gBANxC,iCAYA,wBACEQ,QAAS,kBAAMjB,EAAYL,EAASgB,kBACpCO,KAAK,SACLF,UAAWG,IACT,SACA,aACA,CAAE,WAAYpB,IAAaJ,EAASgB,kBANxC,4BAYA,wBACEM,QAxCQ,WACdf,GAAc,SAAAkB,GAAI,OAAKA,MAwCjBF,KAAK,SACLF,UAAWG,IACT,SACA,aACA,CAAE,YAAalB,IANnB,qBAYCc,GACC,wBACEE,QA9CI,WACZf,GAAc,GACdF,EAAY,KA6CJkB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACE,6BACGb,EAAckB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAAoBA,eCnHhCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a26fd68c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SortFieldName = 'Name',\n  SortFieldLength = 'Length',\n}\n\nfunction getPrepearedGoods(goods: string[],\n  sortType: string, isReversed: boolean) {\n  const prepearedGoods = [...goods];\n\n  if (sortType !== '') {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.SortFieldName: {\n          return good1.localeCompare(good2);\n        }\n\n        case SortType.SortFieldLength: {\n          return good1.length - good2.length;\n        }\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversed ? prepearedGoods.reverse() : prepearedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const vissibleGoods = getPrepearedGoods(goodsFromServer,\n    sortType, isReversed);\n\n  const reverse = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  const isStateNotReversedOrSorted\n    = isReversed || sortType;\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType('');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortType(SortType.SortFieldName)}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.SortFieldName },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortType(SortType.SortFieldLength)}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.SortFieldLength },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={reverse}\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {isStateNotReversedOrSorted && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {vissibleGoods.map(good => (\n            <li data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}